import Head from "next/head";
import Publications from "@/components/Settings/Publications";
import { useManagement } from "@/context/ManagementContext";
import Drafts from "@/components/Settings/Drafts";
import Disabled from "@/components/Settings/Disabled";
import Comments from "@/components/Manager/Comments";
import { GetServerSideProps } from "next";
import { useQuery } from "react-query";
import { Article } from "../admin";
import { Main } from "@/components/Main";



export default function Author() {
  const { data, isLoading, error } = useQuery('articles', async () => {
    
    const [articlesResponse, commentsResponse] = await Promise.all([
      fetch("http://localhost:3000/api/articles"),
      fetch("http://localhost:3000/api/comments")
    ])

    const [{articles}, comments] = await Promise.all([
      articlesResponse.json(),
      commentsResponse.json()
    ])

    const published: Article[] = articles
    .filter((article: Article) => article.state === "active")

    const disabled: Article[] = articles
    .filter((article: Article) => article.state === "inactive")

    const drafts: Article[] = articles
    .filter((article: Article) => article.state === "draft")

    return {
      published, disabled, drafts, comments
    }
  })

  const { navigation } = useManagement()
  return (
    <>
      <Head>
          <title>Author | ARTechCMS</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main>
      {
          navigation === "" ? <Publications articles={data?.published} isLoading={isLoading} error={error}/> : 
          navigation === "drafts" ? <Drafts articles={data?.drafts} isLoading={isLoading} error={error}/> : 
          navigation === "disabled" ? <Disabled articles={data?.disabled} isLoading={isLoading} error={error}/> : 
          navigation === "comments" ? <Comments comments={data?.comments} isLoading={isLoading} error={error}/> : null
      }
      </Main>
    </>
  )
}

  export const getServerSideProps: GetServerSideProps = async ({req, res, params}) => {
  
    let hierarchy = "author" 
    if (hierarchy === "admin") {
      return {
        redirect: {
          destination: '/admin',
          permanent: true
        }
      }
    } else if (hierarchy !== "author"){
      return {
        redirect: {
          destination: '/',
          permanent: true
        }
      }
    }
  
    return {
      props: {
        
      }
    }
  }