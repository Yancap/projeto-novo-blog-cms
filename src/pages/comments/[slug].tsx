import Head from "next/head";
import React, { useState } from 'react'
import { GetServerSideProps } from "next";
import { useQuery } from "react-query";
import { Stack, Icon, Flex, Text, Heading, Spinner } from "@chakra-ui/react";
import { Main } from "../../components/Main";
import { RiArrowLeftSLine, RiDeleteBin7Fill } from 'react-icons/ri'
import { useManagement } from "../../context/ManagementContext";
import Link from "next/link";
import { Pagination } from "@/components/Pagination/index";
import { useRouter } from "../../../node_modules/next/router";
import { cms_api } from "@/services/cms_api";


type Comments = {
  id: string;
  text: string;
  created_at: string;
  user_name: string;
}

export interface ArticleComments {
  comments: Comments[],
  article: {
      id: string;
      slug: string;
      title: string;
      category: string;
  }
}

interface CommentsProps {
  slug:  string
  id:  string
}

interface Delete {
  comment_id: string
  article_id: string
}

export default function Comments({slug}: CommentsProps) {
  
  const { data, isLoading, error, refetch,isRefetching } = useQuery('comments', async () => {
    const token = sessionStorage.getItem('token')
    const config = {
      headers: {
        'Authorization': 'Bearer ' + token 
      }
    }
    const { data } = await cms_api.get(`/comments/from-articles?slug=${slug}`,  config)
    if(data) {
      const { article, comments }: ArticleComments = data
      return {
        comments, article
      }
    }
    return {
      comments: null, message: "Sem comentários"
    }
  })
  const { profile } = useManagement()
  const [page, setPage ] = useState(1)
  const maxPages = (data?.comments) ? Number((data?.comments.length / 5).toFixed())  : 0

  async function handleDelete({comment_id, article_id}: Delete){
    const token = sessionStorage.getItem('token')
    const config = {
      headers: {
        'Authorization': 'Bearer ' + token 
      },
      data:{ comment_id, article_id }
    }
    try {
      await cms_api.delete("/comments/manager-delete", config) 
      refetch()
    } catch {
      
    }
    
  }
  
  return (
    <>
      <Head>
          <title>Admin | ARTechCMS</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.svg" />
      </Head>
      <Main aside={false} bg='gray.800'>
          <Stack gap="10">
              <Link href={`/${profile.hierarchy}`} style={{alignSelf:"flex-start"}}>
                  <Flex align="center" w="fit-content" transition="all" transitionDuration=".15s"
                  borderBottom={"1px"} borderColor='transparent' _hover={{ borderColor:'purple.700'}}>
                      <Icon as={RiArrowLeftSLine} color="purple.700" fontSize='3xl'/>
                      <Text as="span" fontWeight="bold">
                          VOLTAR
                      </Text>
                  </Flex>
              </Link>
              {isLoading ? <Spinner /> :
              <>
                <Heading as='h1' fontWeight="black" >
                    {data?.article?.title || data?.message}
                    <Text as="strong" color="purple.300">!</Text> 
                </Heading>
                <Stack gap="4">
                    <Heading as='h1' fontFamily="Ubuntu" fontWeight="bold" fontSize="2xl">
                        Comentários 
                    </Heading>
                    <Stack borderRadius={4} spacing="4" bg="gray.900" px="8" py="6">
                      {data?.comments?.length === 0 ? 
                      <Text fontWeight="bold" textAlign="center">
                         Sem Comentários 
                      </Text> :
                      <>
                      {data?.comments?.slice((page - 1) * 5, page * 5)
                      .map((comment: Comments) => 
                        <Flex gap="8" key={comment.id}>
                            <Stack flexGrow="1" as='header' gap='0' borderLeft="2px" borderColor="purple.700" pl="3">
                              <Text fontSize="sm" color="gray.700">
                                {comment.user_name} - {new Date(comment.created_at).toLocaleDateString()}
                              </Text>
                              <Text>
                               {comment.text}
                              </Text>
                            </Stack>
                            <Flex align="center">
                              <Icon as={RiDeleteBin7Fill} color="gray.600" _hover={{color:"gray.400"}} 
                              fontSize="2xl" transition="all" transitionDuration=".2s" cursor='pointer' my="auto"
                              onClick={() => {
                                handleDelete({comment_id: comment.id, article_id: data.article.id})
                              }}/>
                            </Flex>
                        </Flex>
                      )}
                        <Flex as="footer" mt="4">
                          <Pagination page={page} setPage={setPage} maxPages={maxPages}/>
                        </Flex>
                      </>
                      }
                    </Stack>
                </Stack>
              </>
              }
          </Stack>
      </Main>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async ({params}) => {
  const slug = params?.slug ?? '';
  
  return {
    props: {
      slug
    },
  }
}