import Head from 'next/head'
import * as yup from 'yup';
import { yupResolver } from '@hookform/resolvers/yup'
import { Flex, Text, Box, Stack, Button, StackProps, ButtonProps, FlexProps, Spinner } from '@chakra-ui/react'
import { Input } from '@/components/Input/index'
import { useManagement } from '@/context/ManagementContext'
import { useRouter } from 'next/router'
import { useForm, SubmitHandler } from 'react-hook-form'
import { cms_api } from '@/services/cms_api';
import { AxiosError } from 'axios';
import { useEffect, useState } from 'react'
import { useMessager } from '@/context/MessageContext';

interface SignInForm{
  email: string;
  password: string;
}

const button: ButtonProps = {
  type:"submit",
  size:{ base: "md", xl:"lg"},
  bg:"purple.700",
  fontSize:"xl",
  color:"white",
  _hover:{bgColor: 'purple.800'}
}

const form: StackProps = {
  as:"form",
  gap:{ base: "8", md: "10", xl:"12"},
  direction:"column",
  bg:"gray.900",
  px:{ base: "2rem", md: "3rem", xl:"4rem"},
  py:{ base: "4.5rem", xl:"5.25rem"},
  w:"100%",
  maxW:{ base: "440px", xl:"480px"},
  borderRadius: 8
}

const main: FlexProps = {
  as:"main",
  justify:"center",
  align:"center",
  w:"100vw",
  h:"100vh",
  p:"4"
}

export default function Home() {
  const signInFormSchema = yup.object().shape({
    email: yup.string().required("E-mail obrigatório.").email("E-mail Inválido."),
    password: yup.string().required("Senha obrigatória.")
  })
  
  const { register, handleSubmit, formState, setError } = useForm<SignInForm>({
    resolver: yupResolver(signInFormSchema)
  })

  const { setProfile } = useManagement()
  const [ loading, setLoading] = useState(false)
  const { setUser, setAsideMessager, setMessagerModal} = useMessager()
  const router = useRouter()
  useEffect(() => {
    //Limpar os Cookies
    document.cookie.split(";")
    .forEach(function(c) { 
      document.cookie = c.replace(/^ +/, "")
      .replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); 
    });
    setUser({name:"", email:""})
    setAsideMessager(false)
    setMessagerModal(false)
  }, [])
  const handleSignIn: SubmitHandler<SignInForm> = async (value, event) =>{
   
    try {
      setLoading(true)
      const { data } = await cms_api.post("/sessions", value)
      const { name, email, hierarchy, token, avatar} = data
      
      setProfile({ name, email, hierarchy, avatar })

      document.cookie = `hierarchy=${hierarchy}; expires=DATA; path=/;`
      document.cookie = `token=${token}; expires=DATA; path=/;`
      sessionStorage.setItem("token", token)
      sessionStorage.setItem("hierarchy", hierarchy)
      sessionStorage.setItem("email", email)
      sessionStorage.setItem("name", name)
      sessionStorage.setItem("avatar", avatar)
      setLoading(false)
      router.push(`/${hierarchy}`)
    } catch (err) {
      if (err instanceof AxiosError) {
        setError("root", { message: err.response?.data.message })
      }
      
    }
  }

  return (
    <>
      <Head>
        <title>Login | ARTechCMS</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex {...main}>
        <Flex {...form} onSubmit={handleSubmit(handleSignIn)}>
          <Stack spacing="4">
            <Box >
              <Input type='email' label='E-mail' {...register('email')} error={formState.errors.email}/>
            </Box>
            <Box >
              <Input type='password' label='Senha' {...register('password')} error={formState.errors.email}/>
              {formState.errors.root && 
              <Text color='red.500'>
                {formState.errors.root.message}
              </Text>
              }
            </Box>
          </Stack>
          <Button {...button} isLoading={loading}>
            { loading ? <Spinner /> : "Entrar"}
          </Button>
        </Flex>
      </Flex>
    </>
  )
}
